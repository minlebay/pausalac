basePath: /api/v1
definitions:
  auth.AccessTokenRequest:
    properties:
      refreshToken:
        example: badbunybabybebe
        type: string
    required:
    - refreshToken
    type: object
  auth.DataSecurityAuthenticated:
    properties:
      expirationAccessDateTime:
        example: "2023-02-02T21:03:53.196419-06:00"
        type: string
      expirationRefreshDateTime:
        example: "2023-02-03T06:53:53.196419-06:00"
        type: string
      jwtAccessToken:
        example: SomeAccessToken
        type: string
      jwtRefreshToken:
        example: SomeRefreshToken
        type: string
    type: object
  auth.DataUserAuthenticated:
    properties:
      email:
        example: some@mail.com
        type: string
      firstName:
        example: John
        type: string
      id:
        example: "123"
        type: string
      lastName:
        example: Doe
        type: string
      role:
        example: admin
        type: string
      status:
        example: true
        type: boolean
    type: object
  auth.LoginRequest:
    properties:
      email:
        example: ilshatminnibaev@gmail.com
        type: string
      password:
        example: Password123
        type: string
    required:
    - email
    - password
    type: object
  auth.SecurityAuthenticatedUser:
    properties:
      data:
        $ref: '#/definitions/auth.DataUserAuthenticated'
      security:
        $ref: '#/definitions/auth.DataSecurityAuthenticated'
    type: object
  controllers.MessageResponse:
    properties:
      message:
        type: string
    type: object
  domain.BankAccount:
    properties:
      account_number:
        type: string
      author:
        type: string
      bank_name:
        type: string
      currency:
        type: string
      iban:
        type: string
      id:
        type: string
      swift_code:
        type: string
    required:
    - account_number
    - author
    - bank_name
    - currency
    - iban
    - swift_code
    type: object
  domain.Company:
    properties:
      activity_code_id:
        type: string
      agency_email:
        type: string
      agency_id:
        type: string
      author:
        type: string
      bank_accounts:
        items:
          $ref: '#/definitions/domain.BankAccount'
        type: array
      call_number:
        type: string
      city:
        type: string
      date_of_registration:
        type: string
      employment_type:
        type: string
      foreign_exchange_account_number:
        type: string
      full_name:
        type: string
      id:
        type: string
      identification_number:
        type: string
      invoice_description:
        type: string
      logo:
        type: string
      municipality_id:
        type: string
      name:
        type: string
      phone:
        type: string
      pib:
        type: string
      signature:
        type: string
      street_address:
        type: string
      street_number:
        type: string
    required:
    - author
    - name
    type: object
  domain.Customer:
    properties:
      address:
        type: string
      author:
        type: string
      city:
        type: string
      country:
        type: string
      currency:
        type: string
      customer_type:
        $ref: '#/definitions/domain.CustomerType'
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
      registration_number:
        type: string
      tax_number:
        type: string
    required:
    - author
    - customer_type
    - name
    - registration_number
    - tax_number
    type: object
  domain.CustomerType:
    enum:
    - internal
    - foreign
    - inactive
    type: string
    x-enum-varnames:
    - INTERNAL
    - FOREIGN
    - INACTIVE
  domain.InvoiceStatus:
    enum:
    - pending
    - paid
    - cancelled
    type: string
    x-enum-varnames:
    - PENDING
    - PAID
    - CANCELLED
  domain.Service:
    properties:
      author:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - author
    - name
    type: object
  domain.SwaggerInvoice:
    properties:
      author:
        example: AuthorName
        type: string
      bank_account:
        $ref: '#/definitions/domain.BankAccount'
      client:
        $ref: '#/definitions/domain.Customer'
      comment:
        example: This is a comment
        type: string
      created_at:
        example: "2022-03-07T13:45:00Z"
        format: date-time
        type: string
      date:
        example: "2022-03-07T13:45:00Z"
        format: date-time
        type: string
      id:
        example: 5f8d04b2e8b2e7f8b2e8b2e8
        type: string
      number:
        example: INV-001
        type: string
      paid_date:
        example: "2022-03-07T13:45:00Z"
        format: date-time
        type: string
      paid_value:
        example: 1000
        type: integer
      sent_date:
        example: "2022-03-07T13:45:00Z"
        format: date-time
        type: string
      services:
        items:
          $ref: '#/definitions/domain.Service'
        type: array
      status:
        $ref: '#/definitions/domain.InvoiceStatus'
      trading_date:
        example: "2022-03-07T13:45:00Z"
        format: date-time
        type: string
      traiding_place:
        example: Online
        type: string
      type:
        example: Type1
        type: string
      updated_at:
        example: "2022-03-07T13:45:00Z"
        format: date-time
        type: string
      value_in_rsd:
        example: 1000.5
        type: number
    type: object
  domain.User:
    properties:
      author:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      status:
        type: boolean
    required:
    - author
    type: object
host: localhost:8080
info:
  contact:
    email: ilshatminnibaev@gmail.com
    name: Ilshat Minnibaev
    url: https://github.com/minlebay
  description: Documentation's Golang Pausalac
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Golang Pausalac
  version: "1.2"
paths:
  /auth/access-token:
    post:
      description: Get access token by refresh token
      parameters:
      - description: body data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.AccessTokenRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SecurityAuthenticatedUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: GetAccessTokenByRefreshToken Email
      tags:
      - auth
  /auth/login:
    post:
      description: Auth user by email and password
      parameters:
      - description: body data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SecurityAuthenticatedUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Login Email
      tags:
      - auth
  /bankaccounts:
    get:
      description: Get all bank accounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.BankAccount'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get all bank accounts
      tags:
      - bankaccounts
    post:
      consumes:
      - application/json
      description: Create a new bank account
      parameters:
      - description: Create Bank Account
        in: body
        name: bankaccount
        required: true
        schema:
          $ref: '#/definitions/domain.BankAccount'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.BankAccount'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new bank account
      tags:
      - bankaccounts
  /bankaccounts/{id}:
    delete:
      description: Delete a bank account
      parameters:
      - description: Bank Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Delete a bank account
      tags:
      - bankaccounts
    get:
      description: Get a bank account by ID
      parameters:
      - description: Bank Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.BankAccount'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get a bank account by ID
      tags:
      - bankaccounts
    put:
      consumes:
      - application/json
      description: Update a bank account
      parameters:
      - description: Bank Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Bank Account
        in: body
        name: bankaccount
        required: true
        schema:
          $ref: '#/definitions/domain.BankAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.BankAccount'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Update a bank account
      tags:
      - bankaccounts
  /companies:
    get:
      description: Get all companies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Company'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get all companies
      tags:
      - companies
    post:
      consumes:
      - application/json
      description: Create a new company
      parameters:
      - description: Create Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/domain.Company'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new company
      tags:
      - companies
  /companies/{id}:
    delete:
      description: Delete a company
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Delete a company
      tags:
      - companies
    get:
      description: Get a company by ID
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Company'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get a company by ID
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Update a company
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/domain.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Update a company
      tags:
      - companies
  /customers:
    get:
      description: Get all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Customer'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get all customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer
      parameters:
      - description: Create Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/domain.Customer'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new customer
      tags:
      - customers
  /customers/{id}:
    delete:
      description: Delete a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Delete a customer
      tags:
      - customers
    get:
      description: Get a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Customer'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get a customer by ID
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update an existing customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Customer
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/domain.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Update a customer
      tags:
      - customers
  /invoices:
    get:
      description: Get all invoices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.SwaggerInvoice'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get all invoices
      tags:
      - invoices
    post:
      consumes:
      - application/json
      description: Create a new invoice
      parameters:
      - description: Create Invoice
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/domain.SwaggerInvoice'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.SwaggerInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new invoice
      tags:
      - invoices
  /invoices/{id}:
    delete:
      description: Delete an invoice
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Delete an invoice
      tags:
      - invoices
    get:
      description: Get an invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.SwaggerInvoice'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get an invoice by ID
      tags:
      - invoices
    put:
      consumes:
      - application/json
      description: Update an invoice
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Invoice
        in: body
        name: invoice
        required: true
        schema:
          $ref: '#/definitions/domain.SwaggerInvoice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.SwaggerInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Update an invoice
      tags:
      - invoices
  /services:
    get:
      description: Get all services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Service'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get all services
      tags:
      - services
    post:
      consumes:
      - application/json
      description: Create a new service
      parameters:
      - description: Create Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/domain.Service'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new service
      tags:
      - services
  /services/{id}:
    delete:
      description: Delete a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Delete a service
      tags:
      - services
    get:
      description: Get a service by ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Service'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get a service by ID
      tags:
      - services
    put:
      consumes:
      - application/json
      description: Update a service
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Service
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/domain.Service'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Service'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Update a service
      tags:
      - services
  /users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a single user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Update User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Update an existing user
      tags:
      - users
  /users/createadmin:
    post:
      consumes:
      - application/json
      description: CreateAdmin method creates a new admin user if there are no users
        in the database
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Create a new admin
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
